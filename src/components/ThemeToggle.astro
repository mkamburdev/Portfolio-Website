---
// Theme toggle with dark mode support and animated icons
---

<button
    id="theme-toggle"
    class="w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200"
    aria-label="Toggle theme"
>
    <svg
        id="sun-icon"
        class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-yellow-500 block dark:hidden"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
    >
        <path
            fill-rule="evenodd"
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
            clip-rule="evenodd"
        />
    </svg>
    <svg
        id="moon-icon"
        class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-gray-200 hidden dark:block"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
    >
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
</button>

<style>
    @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    #theme-toggle:hover svg {
        animation: rotate 0.5s ease-in-out;
    }

    #theme-toggle {
        cursor: pointer;
        border: 1px solid rgb(var(--color-border-main) / 0.1);
    }

    #theme-toggle:hover {
        border-color: rgb(var(--color-border-main) / 0.2);
    }
</style>

<script>
    document.addEventListener('astro:page-load', () => {
        // Get theme from storage or system preference
        const theme = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
                return localStorage.getItem('theme') || 'light';
            }
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        })();

        // Apply initial theme
        document.documentElement.classList.toggle('dark', theme === 'dark');
        localStorage.setItem('theme', theme);

        // Handle theme toggle
        const handleToggleClick = () => {
            const element = document.documentElement;
            const sunIcon = document.getElementById('sun-icon');
            const moonIcon = document.getElementById('moon-icon');
            
            element.classList.toggle('dark');
            
            // Reset and trigger icon animation
            [sunIcon, moonIcon].forEach(icon => {
                if (icon) {
                    icon.style.animation = 'none';
                    void icon.offsetWidth;
                    icon.style.removeProperty('animation');
                }
            });

            localStorage.setItem('theme', element.classList.contains('dark') ? 'dark' : 'light');
        };

        document.getElementById('theme-toggle')?.addEventListener('click', handleToggleClick);
    });
</script>

<script>
    // Restore theme after page transitions
    document.addEventListener('astro:after-swap', () => {
        document.documentElement.classList.toggle('dark', localStorage.theme === 'dark');
    });
</script>
